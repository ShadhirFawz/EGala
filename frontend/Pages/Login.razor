@page "/login"

@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using frontend.Auth
@using frontend.Models
@using frontend.Services
@inject AuthService AuthService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthProvider
@inject ILocalStorageService LocalStorage

<MudPaper Class="p-6 max-w-md mx-auto mt-12" Elevation="6">
    <MudText Typo="Typo.h5" GutterBottom>Login</MudText>

    <MudForm @ref="form" Model="model" onvalidsubmit="HandleLogin">
        <MudTextField @bind-Value="model.Email" Label="Email" Required="true" For="@(() => model.Email)"
            Variant="Variant.Outlined" />
        <MudTextField @bind-Value="model.Password" Label="Password" InputType="InputType.Password" Required="true"
            For="@(() => model.Password)" Variant="Variant.Outlined" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" ButtonType="ButtonType.Submit"
            Disabled="@isLoading">
            @if (isLoading)
            {
                <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mr-2" />
                <span>Logging in...</span>
            }
            else
            {
                <span>Login</span>
            }
        </MudButton>
    </MudForm>

    @if (!string.IsNullOrEmpty(error))
    {
        <MudAlert Severity="Severity.Error" Class="mt-3">@error</MudAlert>
    }

    <!-- Debug Information -->
    <MudPaper Class="mt-4 p-3" Elevation="1">
        <MudText Typo="Typo.body2" Color="Color.Secondary">Debug Info:</MudText>
        <MudText Typo="Typo.body2">Email: @model.Email</MudText>
        <MudText Typo="Typo.body2">Loading: @isLoading</MudText>
        <MudText Typo="Typo.body2">Error: @(error ?? "None")</MudText>
    </MudPaper>

    <MudText Typo="Typo.body2" Class="mt-4">
        Don't have an account?
        <MudLink Href="/register">Register here</MudLink>.
    </MudText>
</MudPaper>

@code {
    private UserLogin model = new();
    private MudForm form = default!;
    private bool isLoading = false;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        // Check if already logged in
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        Console.WriteLine($"OnInitialized - Token exists: {!string.IsNullOrEmpty(token)}");

        if (!string.IsNullOrEmpty(token))
        {
            Console.WriteLine("Already has token, redirecting to events...");
            NavManager.NavigateTo("/events/public");
        }

        await base.OnInitializedAsync();
    }

    private async Task HandleLogin()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            error = "Please fix validation errors";
            return;
        }

        isLoading = true;
        error = null;
        StateHasChanged();

        try
        {
            Console.WriteLine($"Attempting login for: {model.Email}");

            var success = await AuthService.Login(model);
            Console.WriteLine($"Login service result: {success}");

            if (success)
            {
                // Verify token was stored
                var token = await LocalStorage.GetItemAsync<string>("authToken");
                Console.WriteLine($"Token stored: {!string.IsNullOrEmpty(token)}");

                if (!string.IsNullOrEmpty(token))
                {
                    Console.WriteLine("Token verification successful");

                    // Force authentication state update
                    if (AuthProvider is AuthStateProvider provider)
                    {
                        Console.WriteLine("Notifying auth state changed");
                        provider.NotifyUserAuthenticationStateChanged();
                    }

                    // Small delay to ensure state is updated
                    await Task.Delay(100);

                    Console.WriteLine("Navigating to /events/public");
                    NavManager.NavigateTo("/events/public", forceLoad: true);
                }
                else
                {
                    error = "Login failed: No token received";
                    Console.WriteLine("Login failed - no token in storage");
                }
            }
            else
            {
                error = "Invalid email or password. Please check your credentials.";
                Console.WriteLine("Login service returned false");
            }
        }
        catch (Exception ex)
        {
            error = $"Login error: {ex.Message}";
            Console.WriteLine($"Login exception: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}